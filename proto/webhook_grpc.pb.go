// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.1
// source: proto/webhook.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebhookServiceClient is the client API for WebhookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebhookServiceClient interface {
	// Register a webhook listener and get a webhook URL
	RegisterListener(ctx context.Context, in *RegisterListenerRequest, opts ...grpc.CallOption) (*RegisterListenerResponse, error)
	// Stream webhook requests from server to client
	StreamWebhooks(ctx context.Context, in *StreamWebhooksRequest, opts ...grpc.CallOption) (WebhookService_StreamWebhooksClient, error)
	// Send webhook response back to server
	SendWebhookResponse(ctx context.Context, in *WebhookResponse, opts ...grpc.CallOption) (*WebhookResponseAck, error)
}

type webhookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebhookServiceClient(cc grpc.ClientConnInterface) WebhookServiceClient {
	return &webhookServiceClient{cc}
}

func (c *webhookServiceClient) RegisterListener(ctx context.Context, in *RegisterListenerRequest, opts ...grpc.CallOption) (*RegisterListenerResponse, error) {
	out := new(RegisterListenerResponse)
	err := c.cc.Invoke(ctx, "/webhook.WebhookService/RegisterListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) StreamWebhooks(ctx context.Context, in *StreamWebhooksRequest, opts ...grpc.CallOption) (WebhookService_StreamWebhooksClient, error) {
	stream, err := c.cc.NewStream(ctx, &WebhookService_ServiceDesc.Streams[0], "/webhook.WebhookService/StreamWebhooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &webhookServiceStreamWebhooksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WebhookService_StreamWebhooksClient interface {
	Recv() (*WebhookRequest, error)
	grpc.ClientStream
}

type webhookServiceStreamWebhooksClient struct {
	grpc.ClientStream
}

func (x *webhookServiceStreamWebhooksClient) Recv() (*WebhookRequest, error) {
	m := new(WebhookRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *webhookServiceClient) SendWebhookResponse(ctx context.Context, in *WebhookResponse, opts ...grpc.CallOption) (*WebhookResponseAck, error) {
	out := new(WebhookResponseAck)
	err := c.cc.Invoke(ctx, "/webhook.WebhookService/SendWebhookResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebhookServiceServer is the server API for WebhookService service.
// All implementations must embed UnimplementedWebhookServiceServer
// for forward compatibility
type WebhookServiceServer interface {
	// Register a webhook listener and get a webhook URL
	RegisterListener(context.Context, *RegisterListenerRequest) (*RegisterListenerResponse, error)
	// Stream webhook requests from server to client
	StreamWebhooks(*StreamWebhooksRequest, WebhookService_StreamWebhooksServer) error
	// Send webhook response back to server
	SendWebhookResponse(context.Context, *WebhookResponse) (*WebhookResponseAck, error)
	mustEmbedUnimplementedWebhookServiceServer()
}

// UnimplementedWebhookServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebhookServiceServer struct {
}

func (UnimplementedWebhookServiceServer) RegisterListener(context.Context, *RegisterListenerRequest) (*RegisterListenerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterListener not implemented")
}
func (UnimplementedWebhookServiceServer) StreamWebhooks(*StreamWebhooksRequest, WebhookService_StreamWebhooksServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamWebhooks not implemented")
}
func (UnimplementedWebhookServiceServer) SendWebhookResponse(context.Context, *WebhookResponse) (*WebhookResponseAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWebhookResponse not implemented")
}
func (UnimplementedWebhookServiceServer) mustEmbedUnimplementedWebhookServiceServer() {}

// UnsafeWebhookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebhookServiceServer will
// result in compilation errors.
type UnsafeWebhookServiceServer interface {
	mustEmbedUnimplementedWebhookServiceServer()
}

func RegisterWebhookServiceServer(s grpc.ServiceRegistrar, srv WebhookServiceServer) {
	s.RegisterService(&WebhookService_ServiceDesc, srv)
}

func _WebhookService_RegisterListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterListenerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).RegisterListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webhook.WebhookService/RegisterListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).RegisterListener(ctx, req.(*RegisterListenerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_StreamWebhooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamWebhooksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebhookServiceServer).StreamWebhooks(m, &webhookServiceStreamWebhooksServer{stream})
}

type WebhookService_StreamWebhooksServer interface {
	Send(*WebhookRequest) error
	grpc.ServerStream
}

type webhookServiceStreamWebhooksServer struct {
	grpc.ServerStream
}

func (x *webhookServiceStreamWebhooksServer) Send(m *WebhookRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _WebhookService_SendWebhookResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).SendWebhookResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webhook.WebhookService/SendWebhookResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).SendWebhookResponse(ctx, req.(*WebhookResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// WebhookService_ServiceDesc is the grpc.ServiceDesc for WebhookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebhookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webhook.WebhookService",
	HandlerType: (*WebhookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterListener",
			Handler:    _WebhookService_RegisterListener_Handler,
		},
		{
			MethodName: "SendWebhookResponse",
			Handler:    _WebhookService_SendWebhookResponse_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamWebhooks",
			Handler:       _WebhookService_StreamWebhooks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/webhook.proto",
}
